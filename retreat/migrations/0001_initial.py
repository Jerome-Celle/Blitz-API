# Generated by Django 2.0.8 on 2019-05-27 08:47

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('store', '0023_couponuser_uniqueness'),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalPicture',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=253, verbose_name='Name')),
                ('name_fr', models.CharField(max_length=253, null=True, verbose_name='Name')),
                ('name_en', models.CharField(max_length=253, null=True, verbose_name='Name')),
                ('picture', models.TextField(max_length=100, verbose_name='picture')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Picture',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalReservation',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('deleted', models.DateTimeField(editable=False, null=True)),
                ('is_active', models.BooleanField(verbose_name='Active')),
                ('cancelation_reason', models.CharField(blank=True, choices=[('U', 'User canceled'), ('RD', 'Retreat deleted'), ('RM', 'Retreat modified')], max_length=100, null=True, verbose_name='Cancelation reason')),
                ('cancelation_action', models.CharField(blank=True, choices=[('R', 'Refund'), ('E', 'Exchange'), ('N', 'None')], max_length=100, null=True, verbose_name='Cancelation action')),
                ('cancelation_date', models.DateTimeField(blank=True, null=True, verbose_name='Cancelation date')),
                ('is_present', models.BooleanField(default=False, verbose_name='Present')),
                ('refundable', models.BooleanField(default=True, verbose_name='Refundable')),
                ('exchangeable', models.BooleanField(default=True, verbose_name='Exchangeable')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('order_line', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='store.OrderLine', verbose_name='Order line')),
            ],
            options={
                'verbose_name': 'historical reservation',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalRetreat',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('place_name', models.CharField(blank=True, max_length=200, verbose_name='Place name')),
                ('country', models.CharField(max_length=45, verbose_name='Country')),
                ('country_fr', models.CharField(max_length=45, null=True, verbose_name='Country')),
                ('country_en', models.CharField(max_length=45, null=True, verbose_name='Country')),
                ('state_province', models.CharField(max_length=55, verbose_name='State/Province')),
                ('state_province_fr', models.CharField(max_length=55, null=True, verbose_name='State/Province')),
                ('state_province_en', models.CharField(max_length=55, null=True, verbose_name='State/Province')),
                ('city', models.CharField(max_length=50, verbose_name='City')),
                ('city_fr', models.CharField(max_length=50, null=True, verbose_name='City')),
                ('city_en', models.CharField(max_length=50, null=True, verbose_name='City')),
                ('address_line1', models.CharField(max_length=45, verbose_name='Address line 1')),
                ('address_line1_fr', models.CharField(max_length=45, null=True, verbose_name='Address line 1')),
                ('address_line1_en', models.CharField(max_length=45, null=True, verbose_name='Address line 1')),
                ('address_line2', models.CharField(blank=True, max_length=45, null=True, verbose_name='Address line 2')),
                ('address_line2_fr', models.CharField(blank=True, max_length=45, null=True, verbose_name='Address line 2')),
                ('address_line2_en', models.CharField(blank=True, max_length=45, null=True, verbose_name='Address line 2')),
                ('postal_code', models.CharField(max_length=10, verbose_name='Postal code')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='Latitude')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='Longitude')),
                ('timezone', models.CharField(blank=True, max_length=100, null=True, verbose_name='Timezone')),
                ('deleted', models.DateTimeField(editable=False, null=True)),
                ('name', models.CharField(max_length=253, verbose_name='Name')),
                ('name_fr', models.CharField(max_length=253, null=True, verbose_name='Name')),
                ('name_en', models.CharField(max_length=253, null=True, verbose_name='Name')),
                ('details', models.CharField(max_length=1000, verbose_name='Details')),
                ('details_fr', models.CharField(max_length=1000, null=True, verbose_name='Details')),
                ('details_en', models.CharField(max_length=1000, null=True, verbose_name='Details')),
                ('seats', models.IntegerField(verbose_name='Seats')),
                ('reserved_seats', models.IntegerField(default=0, verbose_name='Reserved seats')),
                ('next_user_notified', models.PositiveIntegerField(default=0, verbose_name='Index of the user to be notified next for a resserved place.')),
                ('notification_interval', models.DurationField(default=datetime.timedelta(1), verbose_name='Time between two reserved place notifications.')),
                ('activity_language', models.CharField(blank=True, choices=[('EN', 'English'), ('FR', 'French'), ('B', 'Bilingual')], max_length=100, null=True, verbose_name='Activity language')),
                ('price', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Price')),
                ('start_time', models.DateTimeField(verbose_name='Start time')),
                ('end_time', models.DateTimeField(verbose_name='End time')),
                ('min_day_refund', models.PositiveIntegerField(verbose_name='Minimum days before the event for refund')),
                ('refund_rate', models.PositiveIntegerField(verbose_name='Refund rate')),
                ('min_day_exchange', models.PositiveIntegerField(verbose_name='Minimum days before the event for exchange')),
                ('is_active', models.BooleanField(verbose_name='Active')),
                ('email_content', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Email content')),
                ('accessibility', models.BooleanField(verbose_name='Accessibility')),
                ('form_url', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Form URL')),
                ('carpool_url', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Carpool URL')),
                ('review_url', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Review URL')),
                ('has_shared_rooms', models.BooleanField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Retreat',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalWaitQueue',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Waiting queue',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalWaitQueueNotification',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Wait queue notification',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Picture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=253, verbose_name='Name')),
                ('name_fr', models.CharField(max_length=253, null=True, verbose_name='Name')),
                ('name_en', models.CharField(max_length=253, null=True, verbose_name='Name')),
                ('picture', models.ImageField(upload_to='retreats', verbose_name='picture')),
            ],
            options={
                'verbose_name': 'Picture',
                'verbose_name_plural': 'Pictures',
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.DateTimeField(editable=False, null=True)),
                ('is_active', models.BooleanField(verbose_name='Active')),
                ('cancelation_reason', models.CharField(blank=True, choices=[('U', 'User canceled'), ('RD', 'Retreat deleted'), ('RM', 'Retreat modified')], max_length=100, null=True, verbose_name='Cancelation reason')),
                ('cancelation_action', models.CharField(blank=True, choices=[('R', 'Refund'), ('E', 'Exchange'), ('N', 'None')], max_length=100, null=True, verbose_name='Cancelation action')),
                ('cancelation_date', models.DateTimeField(blank=True, null=True, verbose_name='Cancelation date')),
                ('is_present', models.BooleanField(default=False, verbose_name='Present')),
                ('refundable', models.BooleanField(default=True, verbose_name='Refundable')),
                ('exchangeable', models.BooleanField(default=True, verbose_name='Exchangeable')),
                ('order_line', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='retreat_reservations', to='store.OrderLine', verbose_name='Order line')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Retreat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('place_name', models.CharField(blank=True, max_length=200, verbose_name='Place name')),
                ('country', models.CharField(max_length=45, verbose_name='Country')),
                ('country_fr', models.CharField(max_length=45, null=True, verbose_name='Country')),
                ('country_en', models.CharField(max_length=45, null=True, verbose_name='Country')),
                ('state_province', models.CharField(max_length=55, verbose_name='State/Province')),
                ('state_province_fr', models.CharField(max_length=55, null=True, verbose_name='State/Province')),
                ('state_province_en', models.CharField(max_length=55, null=True, verbose_name='State/Province')),
                ('city', models.CharField(max_length=50, verbose_name='City')),
                ('city_fr', models.CharField(max_length=50, null=True, verbose_name='City')),
                ('city_en', models.CharField(max_length=50, null=True, verbose_name='City')),
                ('address_line1', models.CharField(max_length=45, verbose_name='Address line 1')),
                ('address_line1_fr', models.CharField(max_length=45, null=True, verbose_name='Address line 1')),
                ('address_line1_en', models.CharField(max_length=45, null=True, verbose_name='Address line 1')),
                ('address_line2', models.CharField(blank=True, max_length=45, null=True, verbose_name='Address line 2')),
                ('address_line2_fr', models.CharField(blank=True, max_length=45, null=True, verbose_name='Address line 2')),
                ('address_line2_en', models.CharField(blank=True, max_length=45, null=True, verbose_name='Address line 2')),
                ('postal_code', models.CharField(max_length=10, verbose_name='Postal code')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='Latitude')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='Longitude')),
                ('timezone', models.CharField(blank=True, max_length=100, null=True, verbose_name='Timezone')),
                ('deleted', models.DateTimeField(editable=False, null=True)),
                ('name', models.CharField(max_length=253, verbose_name='Name')),
                ('name_fr', models.CharField(max_length=253, null=True, verbose_name='Name')),
                ('name_en', models.CharField(max_length=253, null=True, verbose_name='Name')),
                ('details', models.CharField(max_length=1000, verbose_name='Details')),
                ('details_fr', models.CharField(max_length=1000, null=True, verbose_name='Details')),
                ('details_en', models.CharField(max_length=1000, null=True, verbose_name='Details')),
                ('seats', models.IntegerField(verbose_name='Seats')),
                ('reserved_seats', models.IntegerField(default=0, verbose_name='Reserved seats')),
                ('next_user_notified', models.PositiveIntegerField(default=0, verbose_name='Index of the user to be notified next for a resserved place.')),
                ('notification_interval', models.DurationField(default=datetime.timedelta(1), verbose_name='Time between two reserved place notifications.')),
                ('activity_language', models.CharField(blank=True, choices=[('EN', 'English'), ('FR', 'French'), ('B', 'Bilingual')], max_length=100, null=True, verbose_name='Activity language')),
                ('price', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Price')),
                ('start_time', models.DateTimeField(verbose_name='Start time')),
                ('end_time', models.DateTimeField(verbose_name='End time')),
                ('min_day_refund', models.PositiveIntegerField(verbose_name='Minimum days before the event for refund')),
                ('refund_rate', models.PositiveIntegerField(verbose_name='Refund rate')),
                ('min_day_exchange', models.PositiveIntegerField(verbose_name='Minimum days before the event for exchange')),
                ('is_active', models.BooleanField(verbose_name='Active')),
                ('email_content', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Email content')),
                ('accessibility', models.BooleanField(verbose_name='Accessibility')),
                ('form_url', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Form URL')),
                ('carpool_url', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Carpool URL')),
                ('review_url', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Review URL')),
                ('has_shared_rooms', models.BooleanField()),
                ('exclusive_memberships', models.ManyToManyField(blank=True, related_name='retreats', to='store.Membership', verbose_name='Memberships')),
                ('users', models.ManyToManyField(blank=True, related_name='retreats', through='retreat.Reservation', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Retreat',
                'verbose_name_plural': 'Retreats',
            },
        ),
        migrations.CreateModel(
            name='WaitQueue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('retreat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wait_queue', to='retreat.Retreat', verbose_name='Retreat')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wait_queues', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Waiting queue',
                'verbose_name_plural': 'Waiting queues',
            },
        ),
        migrations.CreateModel(
            name='WaitQueueNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('retreat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wait_queue_notifications', to='retreat.Retreat', verbose_name='Retreat')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wait_queue_notifications', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Wait queue notification',
                'verbose_name_plural': 'Wait queue notification',
            },
        ),
        migrations.AddField(
            model_name='reservation',
            name='retreat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='retreat.Retreat', verbose_name='Retreat'),
        ),
        migrations.AddField(
            model_name='reservation',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='retreat_reservations', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='picture',
            name='retreat',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pictures', to='retreat.Retreat', verbose_name='Retreat'),
        ),
        migrations.AddField(
            model_name='historicalwaitqueuenotification',
            name='retreat',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='retreat.Retreat', verbose_name='Retreat'),
        ),
        migrations.AddField(
            model_name='historicalwaitqueuenotification',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='historicalwaitqueue',
            name='retreat',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='retreat.Retreat', verbose_name='Retreat'),
        ),
        migrations.AddField(
            model_name='historicalwaitqueue',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='historicalreservation',
            name='retreat',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='retreat.Retreat', verbose_name='Retreat'),
        ),
        migrations.AddField(
            model_name='historicalreservation',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='historicalpicture',
            name='retreat',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='retreat.Retreat', verbose_name='Retreat'),
        ),
        migrations.AlterUniqueTogether(
            name='waitqueue',
            unique_together={('user', 'retreat')},
        ),
    ]
